{"ast":null,"code":"import md5 from \"md5\";\nimport axios from \"axios\";\nexport default {\n  name: \"ModalPostsComponent\",\n  props: {\n    visible: {\n      type: Boolean,\n      default: false\n    },\n    post: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      comments: []\n    };\n  },\n  watch: {\n    post(newPost) {\n      if (newPost && newPost.id) {\n        this.fetchComments(newPost.id);\n      }\n    }\n  },\n  methods: {\n    close() {\n      this.$emit(\"close\");\n    },\n    getGravatarUrl(email) {\n      const hash = md5(email.trim().toLowerCase());\n      return `https://www.gravatar.com/avatar/${hash}?d=identicon`;\n    },\n    async fetchComments(postId) {\n      try {\n        const response = await axios.get(`http://127.0.0.1:8000/api/comments?postId=${postId}`);\n        this.comments = response.data;\n      } catch (error) {\n        console.error(\"Error fetching comments:\", error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["md5","axios","name","props","visible","type","Boolean","default","post","Object","required","data","comments","watch","newPost","id","fetchComments","methods","close","$emit","getGravatarUrl","email","hash","trim","toLowerCase","postId","response","get","error","console"],"sources":["C:\\Users\\Excalibur\\Desktop\\vue-task\\src\\components\\ModalPostsComponent.vue"],"sourcesContent":["<template>\r\n  <transition name=\"modal-posts\">\r\n    <div class=\"modal-mask\" v-if=\"visible\">\r\n      <div class=\"modal-wrapper\">\r\n        <div class=\"modal-container\">\r\n          <div class=\"modal-header\">\r\n            <slot name=\"header\">\r\n              <h1>{{ post.title }}</h1>\r\n            </slot>\r\n            <button class=\"close\" @click=\"close\">\r\n              <img\r\n                src=\"@/assets/tabler_square-rounded-x.png\"\r\n                alt=\"Close Icon\"\r\n              />\r\n            </button>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            <slot name=\"body\">\r\n              <div class=\"post-detail\">\r\n                <p>{{ post.body }}</p>\r\n              </div>\r\n              <div class=\"modal-separator\"></div>\r\n              <div class=\"comments-section\">\r\n                <h3>Comments:</h3>\r\n                <ul>\r\n                  <li\r\n                    v-for=\"comment in comments\"\r\n                    :key=\"comment.id\"\r\n                    class=\"comment-item\"\r\n                  >\r\n                    <div class=\"comment-avatar-name\">\r\n                      <img\r\n                        :src=\"getGravatarUrl(comment.email)\"\r\n                        alt=\"User Avatar\"\r\n                        class=\"comment-avatar\"\r\n                      />\r\n                      <div class=\"comment-name\">\r\n                        <h4>{{ comment.name }}</h4>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"comment-body\">\r\n                      <p>{{ comment.body }}</p>\r\n                    </div>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </slot>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </transition>\r\n</template>\r\n\r\n<script>\r\nimport md5 from \"md5\";\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  name: \"ModalPostsComponent\",\r\n  props: {\r\n    visible: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    post: {\r\n      type: Object,\r\n      required: true,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      comments: [],\r\n    };\r\n  },\r\n  watch: {\r\n    post(newPost) {\r\n      if (newPost && newPost.id) {\r\n        this.fetchComments(newPost.id);\r\n      }\r\n    },\r\n  },\r\n  methods: {\r\n    close() {\r\n      this.$emit(\"close\");\r\n    },\r\n    getGravatarUrl(email) {\r\n      const hash = md5(email.trim().toLowerCase());\r\n      return `https://www.gravatar.com/avatar/${hash}?d=identicon`;\r\n    },\r\n    async fetchComments(postId) {\r\n      try {\r\n        const response = await axios.get(\r\n          `http://127.0.0.1:8000/api/comments?postId=${postId}`\r\n        );\r\n        this.comments = response.data;\r\n      } catch (error) {\r\n        console.error(\"Error fetching comments:\", error);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.modal-mask {\r\n  position: fixed;\r\n  z-index: 9998;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.modal-wrapper {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.modal-container {\r\n  width: 70%;\r\n  max-width: 1200px;\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.modal-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 10px 0;\r\n}\r\n\r\n.close {\r\n  background: none;\r\n  border: none;\r\n  cursor: pointer;\r\n}\r\n\r\n.modal-body {\r\n  display: flex;\r\n  justify-content: space-between;\r\n}\r\n\r\n/* Scrollbar for webkit browsers */\r\n.post-detail {\r\n  overflow-y: scroll;\r\n  scrollbar-color: #d8d9dd;\r\n  scrollbar-width: thin;\r\n  flex: 1;\r\n  margin-right: 20px;\r\n  color: #000000b2;\r\n  max-height: 400px;\r\n  overflow-y: auto;\r\n  padding-right: 10px;\r\n  border-right: 1px solid #d8d9dd;\r\n}\r\n\r\n/* Webkit scrollbar */\r\n.post-detail::-webkit-scrollbar {\r\n  width: 12px;\r\n}\r\n\r\n.post-detail::-webkit-scrollbar-track {\r\n  background: #f1f1f1;\r\n  border-radius: 10px;\r\n}\r\n\r\n.post-detail::-webkit-scrollbar-thumb {\r\n  background-color: #888;\r\n  border-radius: 10px;\r\n  border: 3px solid #f1f1f1;\r\n}\r\n\r\n.post-detail::-webkit-scrollbar-thumb:hover {\r\n  background: #555;\r\n}\r\n\r\n.comments-section {\r\n  flex: 1;\r\n  margin-right: 20px;\r\n  color: #000000b2;\r\n  max-height: 400px;\r\n  overflow-y: scroll;\r\n  padding-right: 10px;\r\n  border-right: 1px solid #d8d9dd;\r\n  scrollbar-color: #d8d9dd;\r\n  scrollbar-width: thin;\r\n}\r\n\r\n.comments-section::-webkit-scrollbar {\r\n  width: 12px; /* Scrollbar genişliği */\r\n}\r\n\r\n.comments-section::-webkit-scrollbar-track {\r\n  background: #f1f1f1; /* Track rengi */\r\n  border-radius: 10px; /* Track köşe yuvarlaklığı */\r\n}\r\n\r\n.comments-section::-webkit-scrollbar-thumb {\r\n  background-color: #888; /* Scrollbar thumb rengi */\r\n  border-radius: 10px; /* Thumb köşe yuvarlaklığı */\r\n  border: 3px solid #f1f1f1; /* Thumb kenarlığı */\r\n}\r\n\r\n.comments-section::-webkit-scrollbar-thumb:hover {\r\n  background: #555; /* Thumb hover rengi */\r\n}\r\nh3 {\r\n  font-family: \"Poppins\";\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n  line-height: 32px;\r\n  text-align: left;\r\n  color: #26303e;\r\n}\r\n.comment-item {\r\n  display: flex;\r\n  align-items: flex-start;\r\n  margin-bottom: 15px;\r\n  flex-direction: column;\r\n}\r\n.comment-avatar-name {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.comment-avatar {\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  margin-right: 10px;\r\n}\r\n.comment-name {\r\n  text-align: left;\r\n}\r\n\r\n.comment-body {\r\n  margin-top: 5px;\r\n  text-align: left;\r\n  padding-left: 50px;\r\n}\r\n\r\n.comment-body p {\r\n  margin: 5px 0 0;\r\n  font-size: 14px;\r\n}\r\n\r\n.modal-separator {\r\n  width: 1px;\r\n  background-color: #d8d9dd;\r\n  height: 100%;\r\n}\r\n</style>\r\n"],"mappings":"AAuDA,OAAOA,GAAE,MAAO,KAAK;AACrB,OAAOC,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,qBAAqB;EAC3BC,KAAK,EAAE;IACLC,OAAO,EAAE;MACPC,IAAI,EAAEC,OAAO;MACbC,OAAO,EAAE;IACX,CAAC;IACDC,IAAI,EAAE;MACJH,IAAI,EAAEI,MAAM;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACDC,KAAK,EAAE;IACLL,IAAIA,CAACM,OAAO,EAAE;MACZ,IAAIA,OAAM,IAAKA,OAAO,CAACC,EAAE,EAAE;QACzB,IAAI,CAACC,aAAa,CAACF,OAAO,CAACC,EAAE,CAAC;MAChC;IACF;EACF,CAAC;EACDE,OAAO,EAAE;IACPC,KAAKA,CAAA,EAAG;MACN,IAAI,CAACC,KAAK,CAAC,OAAO,CAAC;IACrB,CAAC;IACDC,cAAcA,CAACC,KAAK,EAAE;MACpB,MAAMC,IAAG,GAAItB,GAAG,CAACqB,KAAK,CAACE,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC;MAC5C,OAAO,mCAAmCF,IAAI,cAAc;IAC9D,CAAC;IACD,MAAMN,aAAaA,CAACS,MAAM,EAAE;MAC1B,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMzB,KAAK,CAAC0B,GAAG,CAC9B,6CAA6CF,MAAM,EACrD,CAAC;QACD,IAAI,CAACb,QAAO,GAAIc,QAAQ,CAACf,IAAI;MAC/B,EAAE,OAAOiB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}